import java.util.*;

public class Player {
    /**
     * Performs a move
     *
     * @param gameState
     *            the current state of the board
     * @param deadline
     *            time before which we must have returned
     * @return the next state the board is in after our move
     */
    private int boardSize = GameState.BOARD_SIZE;

    public GameState play(final GameState gameState, final Deadline deadline) {
        int min = Integer.MIN_VALUE;
        int max = Integer.MAX_VALUE;
                int best = -10000000;
        int argmax = 0;
        Vector<GameState> nextStates = new Vector<GameState>();
        gameState.findPossibleMoves(nextStates);
        GameState bestMove = nextStates.elementAt(0);
        if (nextStates.size() == 0) {
            // Must play "pass" move if there are no other moves possible.
            return new GameState(gameState, new Move());
        }
                for (int state = 0; state < nextStates.size(); state++) {
            int minimax = 0;
            minimax = alphaBeta(nextStates.elementAt(state), nextStates.size() < 45 ? 0: 0, Integer.MIN_VALUE, Integer.MAX_VALUE, 1);
            if (minimax > best) {
                best = minimax;
  
                argmax = state;

            }


        }

        return nextStates.elementAt(argmax);
    }


    private int spaceDiagonals(GameState state, int player){
        int counter = 0;
        int opCount = 0;
        int emptyCount = 0;
        int score = 0;

        //yzx
        for(int i=0; i<boardSize;i++){
            if(state.at(i,i,3-i) == player) counter += 1;
            else if(state.at(i,i,3-i) == 2) opCount += 1;
            else if(state.at(i,i,3-i)== Constants.CELL_EMPTY) emptyCount +=1;
        }

        score += scoreCalculater(player,counter,opCount, emptyCount);
        counter =0;
        emptyCount =0;
        counter =0;

        //xzy
        for(int i=0; i<boardSize;i++){
            if(state.at(i,i,i) == player) counter += 1;
            else if(state.at(i,i,i) == 2) opCount += 1;
            else if(state.at(i,i,i)== Constants.CELL_EMPTY)emptyCount +=1;
        }

        score += scoreCalculater(player,counter,opCount, emptyCount);
        counter =0;
        emptyCount =0;
        counter =0;

        //zxy
        for(int i=0; i<boardSize;i++){
            if(state.at(3-i,i,i) == player) counter += 1;
            else if(state.at(3-i,i,i) == 2) opCount += 1;
            else if(state.at(3-i,i,i)== Constants.CELL_EMPTY)emptyCount +=1;
        }

        score += scoreCalculater(player,counter,opCount, emptyCount);
        counter =0;
        emptyCount =0;
        counter =0;

        //xyz
        for(int i=0; i<boardSize;i++){
            if(state.at(i,3-i,i) == player) counter += 1;
            else if(state.at(i,3-i,i) == 2) opCount += 1;
            else if(state.at(i,3-i,i)== Constants.CELL_EMPTY)emptyCount +=1;
        }

        score += scoreCalculater(player,counter,opCount, emptyCount);


        return score;
    }


    private int columns(GameState state, int player){
        int counter = 0;
        int opCount = 0;
        int emptyCount = 0;
        int score = 0;
        //i = z, j = x, k = y

        for (int i = 0; i < boardSize;i++){
            for(int j = 0; j<boardSize;j++){
                for(int k = 0; k<boardSize;k++){
                    if(state.at(j,k,i)== player) counter += 1;
                    else if(state.at(j,k,i)== 2) opCount += 1;
                    else if(state.at(j,k,i)== Constants.CELL_EMPTY) emptyCount += 1;
                }
                score += scoreCalculater(player,counter,opCount, emptyCount);
                counter =0;
                emptyCount =0;
                counter =0;
            }
        }
        return score;
    }

    private int rows(GameState state, int player){
        int counter = 0;
        int opCount = 0;
        int score = 0;
        int emptyCount = 0;

    //z = i, y = j, x = k
        for (int i = 0; i < boardSize; i++) {
            for (int j= 0; j < boardSize; j++) {
                for (int k = 0; k < boardSize; k++) {
                    if(state.at(k, j,i)==player) {
                        counter += 1;
                    }else if(state.at(k,j,i)== 2){
                        opCount += 1;
                    }else if(state.at(k,j,i)== Constants.CELL_EMPTY){
                        emptyCount += 1;
                    }
                }
                score += scoreCalculater(player, counter,opCount,emptyCount);
                counter =0;
                opCount = 0;
                emptyCount = 0;
            }
        }
        return score;
    }

    private int zAxis(GameState state, int player){
        int counter = 0;
        int opCount = 0;
        int score = 0;
        int emptyCount = 0;

        for (int i = 0; i < boardSize; i++) {
            for (int j= 0; j < boardSize; j++) {
                for (int k = 0; k < boardSize; k++) {
                    if(state.at(i, j, k)==player) {
                        counter += 1;
                    }else if(state.at(i,j,k)== 2){
                        opCount += 1;
                    }else if(state.at(i,j,k)== Constants.CELL_EMPTY){
                        emptyCount += 1;
                    }
                }
                score += scoreCalculater(player, counter,opCount,emptyCount);
                counter =0;
                opCount = 0;
                emptyCount = 0;
            }
        }
        return score;
    }

    private int xyPlaneDiagonals(GameState state, int player){
        int counter = 0;
        int opCount = 0;
        int score = 0;
        int emptyCount = 0;

        // i = z, j= x

        for(int i = 0; i < boardSize; i++){
            for(int j= 0; j< boardSize;j++){
                if(state.at(j,j,i)== player) counter +=1;
                else if(state.at(j,j,i)== 2) opCount +=1;
                else if(state.at(j,j,i)== Constants.CELL_EMPTY) emptyCount +=1;
            }
            score += scoreCalculater(player, counter,opCount,emptyCount);
            counter =0;
            opCount = 0;
            emptyCount = 0;

        }

        //Backward diagonal
        for(int i = 0; i < boardSize; i++){
            for(int j= 0; j< boardSize;j++){
                if(state.at(3-j,j,i)== player) counter +=1;
                else if(state.at(3-j,j,i)== 2) opCount +=1;
                else if(state.at(3-j,j,i)== Constants.CELL_EMPTY) emptyCount +=1;
            }
            score += scoreCalculater(player, counter,opCount,emptyCount);
            counter =0;
            opCount = 0;
            emptyCount = 0;

        }

        return score;

    }

        private int yzPlaneDiagonals(GameState state, int player){
        int counter = 0;
        int opCount = 0;
        int score = 0;
        int emptyCount = 0;

        // i = x, j= y

        for(int i = 0; i < boardSize; i++){
            for(int j= 0; j< boardSize;j++){
                if(state.at(i,j,j)== player) counter +=1;
                else if(state.at(i,j,j)== 2) opCount +=1;
                else if(state.at(i,j,j)== Constants.CELL_EMPTY) emptyCount +=1;
            }
            score += scoreCalculater(player, counter,opCount,emptyCount);
            counter =0;
            opCount = 0;
            emptyCount = 0;

        }

        //Backward diagonal
        for(int i = 0; i < boardSize; i++){
            for(int j= 0; j< boardSize;j++){
                if(state.at(i,3-j,j)== player) counter +=1;
                else if(state.at(i,3-j,j)== 2) opCount +=1;
                else if(state.at(i,3-j,j)== Constants.CELL_EMPTY) emptyCount +=1;
            }
            score += scoreCalculater(player, counter,opCount,emptyCount);
            counter =0;
            opCount = 0;
            emptyCount = 0;

        }

        return score;

    }

        private int xzPlaneDiagonals(GameState state, int player){
        int counter = 0;
        int opCount = 0;
        int score = 0;
        int emptyCount = 0;

        // i = y, j= x

        for(int i = 0; i < GameState.BOARD_SIZE; i++){
            for(int j= 0; j< GameState.BOARD_SIZE;j++){
                if(state.at(j,i,j)== player) counter +=1;
                else if(state.at(j,i,j)== 2) opCount +=1;
                else if(state.at(j,i,j)== Constants.CELL_EMPTY) emptyCount +=1;
            }
            score += scoreCalculater(player, counter,opCount,emptyCount);
            counter =0;
            opCount = 0;
            emptyCount = 0;

        }

        //Backward diagonal
        for(int i = 0; i < GameState.BOARD_SIZE; i++){
            for(int j= 0; j< GameState.BOARD_SIZE;j++){
                if(state.at(3-j,i,j)== player) counter +=1;
                else if(state.at(3-j,i,j)== 2) opCount +=1;
                else if(state.at(3-j,i,j)== Constants.CELL_EMPTY) emptyCount +=1;
            }
            score += scoreCalculater(player, counter,opCount,emptyCount);
            counter =0;
            opCount = 0;
            emptyCount = 0;

        }

        return score;

    }


    private int scoreCalculater(int player, int counter,int opCount,int emptyCount){
       int score = 0;

        if(counter == 1 && emptyCount == 3) score = 10;
        else if(counter==2 && emptyCount == 2)score = 20; 
        else if(counter == 3 && emptyCount == 1) score = 100;
        else if(counter == 4) score =1000;
        else if(counter ==1 && opCount >=0) score = 10;
        
        


       return score;
        
    }


    private int HeuristicValue(GameState state, int player){
        int score = 0;
        //score += Diagonals(state, player);
        score += rows(state,player) ;
        score += columns(state, player);
        score += xyPlaneDiagonals(state, player);
        score += yzPlaneDiagonals(state, player);
        score += xzPlaneDiagonals(state, player);
        score += zAxis(state,player);
        score += spaceDiagonals(state,player);


        if(player == 1){
            return score;
        }else{
            return -score;
        }

    }



    private int alphaBeta(GameState state, int alpha, int beta, int depth, int Player){
        Vector<GameState> nextStates = new Vector<GameState>();
        state.findPossibleMoves(nextStates);

        if(depth == 0){
            return HeuristicValue(state,Player);
        }if(Player == 1){
            int v = Integer.MIN_VALUE;
        
            for(GameState childState: nextStates){
                v = Math.max(v, alphaBeta(childState
                        ,alpha,beta,depth -1, 2));
                alpha = Math.max(alpha,v);
                if(beta <= alpha){
                    break;
                }
            } 
        
        
        return v;
        }else{
            int v = Integer.MAX_VALUE;
            for(GameState childState:nextStates){
                v = Math.min(v, alphaBeta(childState
                        ,alpha,beta,depth -1, 1));
                beta = Math.min(beta, v);
                if(beta <= alpha) break;
            }
        return v;
        }
        
    }

}
